/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedTestFormattingRouteImport } from './routes/_authenticated/test-formatting'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as authAuthCallbackRouteImport } from './routes/(auth)/auth-callback'
import { Route as AuthenticatedVocationalTestIndexRouteImport } from './routes/_authenticated/vocational-test/index'
import { Route as AuthenticatedProfileIndexRouteImport } from './routes/_authenticated/profile/index'
import { Route as AuthenticatedDashboardIndexRouteImport } from './routes/_authenticated/dashboard/index'
import { Route as AuthenticatedVocationalTestResultsSessionIdRouteImport } from './routes/_authenticated/vocational-test/results.$sessionId'

const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedTestFormattingRoute =
  AuthenticatedTestFormattingRouteImport.update({
    id: '/test-formatting',
    path: '/test-formatting',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const authAuthCallbackRoute = authAuthCallbackRouteImport.update({
  id: '/(auth)/auth-callback',
  path: '/auth-callback',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedVocationalTestIndexRoute =
  AuthenticatedVocationalTestIndexRouteImport.update({
    id: '/vocational-test/',
    path: '/vocational-test/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedProfileIndexRoute =
  AuthenticatedProfileIndexRouteImport.update({
    id: '/profile/',
    path: '/profile/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedDashboardIndexRoute =
  AuthenticatedDashboardIndexRouteImport.update({
    id: '/dashboard/',
    path: '/dashboard/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedVocationalTestResultsSessionIdRoute =
  AuthenticatedVocationalTestResultsSessionIdRouteImport.update({
    id: '/vocational-test/results/$sessionId',
    path: '/vocational-test/results/$sessionId',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth-callback': typeof authAuthCallbackRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/test-formatting': typeof AuthenticatedTestFormattingRoute
  '/dashboard': typeof AuthenticatedDashboardIndexRoute
  '/profile': typeof AuthenticatedProfileIndexRoute
  '/vocational-test': typeof AuthenticatedVocationalTestIndexRoute
  '/vocational-test/results/$sessionId': typeof AuthenticatedVocationalTestResultsSessionIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth-callback': typeof authAuthCallbackRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/test-formatting': typeof AuthenticatedTestFormattingRoute
  '/dashboard': typeof AuthenticatedDashboardIndexRoute
  '/profile': typeof AuthenticatedProfileIndexRoute
  '/vocational-test': typeof AuthenticatedVocationalTestIndexRoute
  '/vocational-test/results/$sessionId': typeof AuthenticatedVocationalTestResultsSessionIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/(auth)/auth-callback': typeof authAuthCallbackRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/_authenticated/test-formatting': typeof AuthenticatedTestFormattingRoute
  '/_authenticated/dashboard/': typeof AuthenticatedDashboardIndexRoute
  '/_authenticated/profile/': typeof AuthenticatedProfileIndexRoute
  '/_authenticated/vocational-test/': typeof AuthenticatedVocationalTestIndexRoute
  '/_authenticated/vocational-test/results/$sessionId': typeof AuthenticatedVocationalTestResultsSessionIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth-callback'
    | '/login'
    | '/register'
    | '/test-formatting'
    | '/dashboard'
    | '/profile'
    | '/vocational-test'
    | '/vocational-test/results/$sessionId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth-callback'
    | '/login'
    | '/register'
    | '/test-formatting'
    | '/dashboard'
    | '/profile'
    | '/vocational-test'
    | '/vocational-test/results/$sessionId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/(auth)/auth-callback'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/_authenticated/test-formatting'
    | '/_authenticated/dashboard/'
    | '/_authenticated/profile/'
    | '/_authenticated/vocational-test/'
    | '/_authenticated/vocational-test/results/$sessionId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  authAuthCallbackRoute: typeof authAuthCallbackRoute
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/test-formatting': {
      id: '/_authenticated/test-formatting'
      path: '/test-formatting'
      fullPath: '/test-formatting'
      preLoaderRoute: typeof AuthenticatedTestFormattingRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/auth-callback': {
      id: '/(auth)/auth-callback'
      path: '/auth-callback'
      fullPath: '/auth-callback'
      preLoaderRoute: typeof authAuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/vocational-test/': {
      id: '/_authenticated/vocational-test/'
      path: '/vocational-test'
      fullPath: '/vocational-test'
      preLoaderRoute: typeof AuthenticatedVocationalTestIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/profile/': {
      id: '/_authenticated/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/dashboard/': {
      id: '/_authenticated/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/vocational-test/results/$sessionId': {
      id: '/_authenticated/vocational-test/results/$sessionId'
      path: '/vocational-test/results/$sessionId'
      fullPath: '/vocational-test/results/$sessionId'
      preLoaderRoute: typeof AuthenticatedVocationalTestResultsSessionIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedTestFormattingRoute: typeof AuthenticatedTestFormattingRoute
  AuthenticatedDashboardIndexRoute: typeof AuthenticatedDashboardIndexRoute
  AuthenticatedProfileIndexRoute: typeof AuthenticatedProfileIndexRoute
  AuthenticatedVocationalTestIndexRoute: typeof AuthenticatedVocationalTestIndexRoute
  AuthenticatedVocationalTestResultsSessionIdRoute: typeof AuthenticatedVocationalTestResultsSessionIdRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedTestFormattingRoute: AuthenticatedTestFormattingRoute,
  AuthenticatedDashboardIndexRoute: AuthenticatedDashboardIndexRoute,
  AuthenticatedProfileIndexRoute: AuthenticatedProfileIndexRoute,
  AuthenticatedVocationalTestIndexRoute: AuthenticatedVocationalTestIndexRoute,
  AuthenticatedVocationalTestResultsSessionIdRoute:
    AuthenticatedVocationalTestResultsSessionIdRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  authAuthCallbackRoute: authAuthCallbackRoute,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
